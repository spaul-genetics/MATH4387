---
title: "Introduction to Python"
author: "Subrata Paul"
date: "6/3/2020"
output: 
  ioslides_presentation:
    widescreen: true
    hitheme: zenburn
---

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script>

<script>
    $(document).ready(function() {
    $('slide:not(.title-slide, .backdrop, .segue)').append('<footer></footer>');    
    $('footer').attr('url', "https://math5387.web.app");

  })
</script>




<style>
pre {
    display: block;
    font-family: monospace;
    white-space: pre;
    margin: 1em 0px;
    margin-top: 0em;
    margin-right: 0px;
    margin-bottom: -0.2em;
    margin-left: 0px;
}
footer:after {
    font-size: 12pt;
    content: attr(url);
    position: absolute;
    bottom: 5px;
    right: 60px;
    line-height: 1.9;
    display: block;
  }
slides > slide {
  font-family: 'Open Sans', Arial, sans-serif;
  font-size: 26px;
  color: #797979;
  width: 900px;
  height: 700px;
  margin-left: -450px;
  margin-top: -350px;
  padding: 0px 60px;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  -ms-border-radius: 5px;
  -o-border-radius: 5px;
  border-radius: 5px;
  -webkit-transition: all 0.6s ease-in-out;
  -moz-transition: all 0.6s ease-in-out;
  -o-transition: all 0.6s ease-in-out;
  transition: all 0.6s ease-in-out;
}
slides > slide > hgroup + article {
  margin-top: 5px;
}
</style>

## Data types 

```{r}
library(reticulate)
use_python('/Users/spaul/opt/anaconda3/bin/python')
knitr::opts_chunk$set(python.reticulate=FALSE)
```

```{python}
l = [1,2,3,4]
t = (1,2,3,4)
s = {1,2,3,4}
d = {'a':'something', 'b':'something else'}
type(l)
type(t)
type(s)
type(d)
```


## The `range` function

```{python}
range(1,10)
type(range(1,10))
list(range(1,10))
range(10)
list(range(10))
list(range(1,10,2))
```

## Libraries 

```{python}
import numpy as np
np.linspace(2,3,5)
np.arange(1,10)
np.sqrt(100)
x = np.array([1,2,3,4])
np.sqrt(x)
np.sum(x)
```

## The `rep` function in `R`

```{python}
import numpy as np
[1,2] * 3
[1,2,3] + [2,3,4]
#[1,2,3] + 1 Does not work
np.array([1,2,3]) + 1
```

## Logical

```{python}
import numpy as np
x = np.random.normal(loc = 5, scale = 3, size = 10)
x
x > 5
```

## Commonly-used Functions

```{python, engine.path="/Users/spaul/opt/anaconda3/bin/python"}
import numpy as np
x = np.random.normal(loc = 5, scale = 3, size = 10)
np.sum(x)
np.std(x)
np.abs(x)
np.var(x)
np.log(x)
```

## Function

```{python}
import numpy as np
def five_point_summary(x):
  mini = np.min(x)
  maxi = np.max(x)
  q = np.quantile(x,[.25,.50,.75])
  return [mini] + list(q) + [maxi]
x = np.random.normal(loc = 5, scale = 3, size = 10)
five_point_summary(x)
```

## Functions related to statistical distribution
```{python}
import scipy.stats as st
#loc = mean, scale = sd
st.norm.cdf(3, loc = 1, scale = 2) #pnorm
st.norm.pdf(3, loc = 1, scale = 2) #dnorm
st.norm.ppf(0.8413, loc = 1, scale = 2) # qnorm
st.norm.rvs(loc =1, scale = 2, size = 10) # rnorm
st.norm.rvs(10) # Standard normal
st.norm.rvs(size = 10)
```

## Data Frames

```{python}
import pandas as pd
import numpy as np
mydataframe = pd.DataFrame({'d':[1,2,3,4], 'e':['red','white','blue',np.NAN], 'f':[True, True, False, True]})
mydataframe
```

## Rename columns
```{python}
import pandas as pd
import numpy as np
mydataframe = pd.DataFrame({'d':[1,2,3,4], 'e':['red','white','blue',np.NAN], 'f':[True, True, False, True]})
mydataframe.columns = ['ID','Color','Passed']
mydataframe
```

## Access columns
```{python}
import pandas as pd
import numpy as np
mydataframe = pd.DataFrame({'d':[1,2,3,4], 'e':['red','white','blue',np.NAN], 'f':[True, True, False, True]})
mydataframe.columns = ['ID','Color','Passed']
mydataframe.ID
mydataframe[['ID','Color']]
```


## Indexing and Slicing
```{python}
import pandas as pd
import numpy as np
mydataframe = pd.DataFrame({'d':[1,2,3,4], 'e':['red','white','blue',np.NAN], 'f':[True, True, False, True]})
mydataframe.columns = ['ID','Color','Passed']
mydataframe.loc[1:2,['ID','Passed']]
mydataframe.loc[:,'ID']
```

## Indexing and Slicing
```{python}
import pandas as pd
import numpy as np
mydataframe = pd.DataFrame({'d':[1,2,3,4], 'e':['red','white','blue',np.NAN], 'f':[True, True, False, True]})
mydataframe.iloc[1:2,0]
mydataframe.iloc[:,[0,1]]
```

## Importing Data{.smaller}

```{python}
import pandas as pd
help(pd.read_csv)
```

## Sample data analysis

```{python}
import pandas as pd
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
pima.head()
```


## Assign NULL for missing data
```{python}
import pandas as pd
import numpy as np
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
pima.diastolic.sort_values().head()
pima.diastolic[pima.diastolic==0] = np.NaN
pima.diastolic.sort_values(na_position = 'first').head()
```

## Assign NaN to missing data
```{python}
import pandas as pd
import numpy as np
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
pima.glucose[pima.glucose==0] = np.NaN
pima.triceps[pima.triceps==0] = np.NaN
pima.insulin[pima.insulin==0] = np.NaN
pima.bmi[pima.bmi==0] = np.NaN
```

## Assign NaN to missing data
```{python}
import pandas as pd
import numpy as np
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
pima.replace(0,np.nan, inplace = True)
pima.head()
```

## Plotting Histogram
```{python, message = F, warning = F}
import pandas as pd
import numpy as np
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
import matplotlib.pyplot as plt
_ = plt.hist(pima.diastolic)
plt.show()
```


## Plotting Histogram
```{python}
import pandas as pd
pima = pd.read_csv('./data/pima.txt', header = 0, sep = '\t')
import matplotlib.pyplot as plt
_ =plt.hist(pima.diastolic[~np.isnan(pima.diastolic)], bins = 30, density = True)
plt.show()
```

## Galapagos Data

```{python}
import pandas as pd
gala = pd.read_csv('./data/gala.txt',header = 0, sep = '\t')
gala.head()
```

## Plot data
```{python}
import pandas as pd
import matplotlib.pyplot as plt
gala = pd.read_csv('./data/gala.txt',header = 0, sep = '\t')

_=pd.plotting.scatter_matrix(gala)
plt.show()
```

## Fit multiple regression model

```{python, warning = F, message = F, eval=F}
import statsmodels.api as sm
Y = gala.Species
X = gala.iloc[:,2:]
X['const'] = np.ones(X.shape[0])
lmod = sm.OLS(Y, X)
res = lmod.fit()
print(res.summary())
```



## Fit multiple regression model{.smaller}

```{python, warning = F, message = F, echo=F}
import statsmodels.api as sm
Y = gala.Species
X = gala.iloc[:,2:]
X['const'] = np.ones(X.shape[0])
lmod = sm.OLS(Y, X)
res = lmod.fit()
print(res.summary())
```

## Parameters

```{python}
res.params

```

## Standard Errors

```{python}
res.bse
```

## Fitted Values{.smaller} 
```{python}
res.fittedvalues
```


```{python}
res.rsquared
res.rsquared_adj
```








